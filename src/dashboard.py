# Here I used chat gbt for some code blocks


import time
import threading
from typing import Dict, Any, List
from datetime import datetime, timedelta

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import plotly.express as px
import pandas as pd

from src.db_manager import MongoDBManager
from src.config import DASHBOARD_HOST, DASHBOARD_PORT, DASHBOARD_REFRESH_INTERVAL


class InteractionDashboard:
    """Dashboard for visualizing user interaction metrics."""
    
    def __init__(
        self,
        db_manager: MongoDBManager = None,
        host: str = DASHBOARD_HOST,
        port: int = DASHBOARD_PORT,
        refresh_interval: int = DASHBOARD_REFRESH_INTERVAL
    ):
        """
        Initialize the dashboard.
        
        Args:
            db_manager: MongoDB manager instance
            host: Host to run the dashboard on
            port: Port to run the dashboard on
            refresh_interval: Dashboard refresh interval in seconds
        """
        self.db_manager = db_manager or MongoDBManager()
        self.host = host
        self.port = port
        self.refresh_interval = refresh_interval
        
        self.app = dash.Dash(__name__, title="User Interaction Analytics")
        self.setup_layout()
        self.setup_callbacks()
        
    def setup_layout(self):
        self.app.layout = html.Div([
            html.H1("User Interaction Analytics Dashboard", className="dashboard-title"),
            
            html.Div([
                html.Div([
                    html.H3("Real-time Metrics"),
                    html.Div(id="avg-interactions-per-user", className="metric"),
                    html.Div(id="active-users-count", className="metric"),
                    html.Div(id="active-items-count", className="metric"),
                ], className="metrics-container"),
                
                html.Div([
                    html.H3("Interaction Distribution"),
                    dcc.Graph(id="interaction-distribution-chart"),
                ], className="chart-container"),
            ], className="top-row"),
            
            html.Div([
                html.Div([
                    html.H3("Max Interactions Per Item"),
                    dcc.Graph(id="max-interactions-chart"),
                ], className="chart-container"),
                
                html.Div([
                    html.H3("Min Interactions Per Item"),
                    dcc.Graph(id="min-interactions-chart"),
                ], className="chart-container"),
            ], className="bottom-row"),
            
            dcc.Interval(
                id="interval-component",
                interval=self.refresh_interval * 1000,  # in milliseconds
                n_intervals=0
            ),
            
            html.Div(id="metrics-data", style={"display": "none"}),
            
            # This piece of code has been generated by chat gbt
            html.Style("""
                .dashboard-title {
                    text-align: center;
                    padding: 20px;
                    background-color: #2c3e50;
                    color: white;
                    margin: 0;
                }
                .top-row, .bottom-row {
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: space-between;
                    margin: 20px;
                }
                .metrics-container, .chart-container {
                    background-color: white;
                    border-radius: 5px;
                    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                    padding: 15px;
                    margin: 10px;
                    flex: 1;
                    min-width: 300px;
                }
                .metric {
                    font-size: 24px;
                    margin: 20px 0;
                    padding: 10px;
                    background-color: #f8f9fa;
                    border-radius: 5px;
                }
                body {
                    background-color: #f5f5f5;
                    font-family: 'Arial', sans-serif;
                    margin: 0;
                }
            """)
        ])
        
    def setup_callbacks(self):
        @self.app.callback(
            Output("metrics-data", "children"),
            Input("interval-component", "n_intervals")
        )
        def update_metrics_data(n):
            try:
                if not self.db_manager.client:
                    self.db_manager.connect()
                    
                metrics = self.db_manager.get_latest_metrics()
                
                df = pd.DataFrame([{
                    'metric_type': metric['metric_type'],
                    'metric_value': metric['metric_value'],
                    'dimensions': metric.get('dimensions', {}),
                    'timestamp': metric['timestamp']
                } for metric in metrics])
                
                return df.to_json(date_format='iso', orient='split')
            except Exception as e:
                print(f"Error fetching metrics: {e}")
                return "{}"
                
        @self.app.callback(
            [Output("avg-interactions-per-user", "children"),
             Output("active-users-count", "children"),
             Output("active-items-count", "children")],
            Input("metrics-data", "children")
        )
        def update_metrics_display(json_data):
            if not json_data:
                return "Avg: 0.0 interactions/user", "Active Users: 0", "Active Items: 0"
                
            try:
                df = pd.read_json(json_data, orient='split')
                
                avg_interactions = df[df['metric_type'] == 'avg_interactions_per_user']['metric_value'].max()
                avg_interactions = avg_interactions if not pd.isna(avg_interactions) else 0.0
                
                active_users = df[df['metric_type'] == 'active_users_count']['metric_value'].max()
                active_users = int(active_users) if not pd.isna(active_users) else 0
                
                active_items = df[df['metric_type'] == 'active_items_count']['metric_value'].max()
                active_items = int(active_items) if not pd.isna(active_items) else 0
                
                return (
                    f"Avg: {avg_interactions:.2f} interactions/user",
                    f"Active Users: {active_users}",
                    f"Active Items: {active_items}"
                )
            except Exception as e:
                print(f"Error updating metrics: {e}")
                return "Avg: 0.0 interactions/user", "Active Users: 0", "Active Items: 0"
                
        @self.app.callback(
            Output("interaction-distribution-chart", "figure"),
            Input("metrics-data", "children")
        )
        def update_distribution_chart(json_data):
            """Update the interaction distribution chart."""
            if not json_data:
                return px.bar(x=[], y=[])
                
            try:
                df = pd.read_json(json_data, orient='split')
                
                df_interaction = df[df['metric_type'] == 'interaction_count_by_type']
                
                if len(df_interaction) == 0:
                    return px.bar(x=[], y=[])
                    
                interaction_types = []
                counts = []
                
                for _, row in df_interaction.iterrows():
                    interaction_type = row['dimensions'].get('interaction_type', 'unknown')
                    interaction_types.append(interaction_type)
                    counts.append(row['metric_value'])
                    
                fig = px.bar(
                    x=interaction_types,
                    y=counts,
                    labels={'x': 'Interaction Type', 'y': 'Count'},
                    color=interaction_types,
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )
                
                fig.update_layout(
                    margin=dict(l=20, r=20, t=30, b=40),
                    paper_bgcolor='white',
                    plot_bgcolor='white'
                )
                
                return fig
            except Exception as e:
                print(f"Error updating distribution chart: {e}")
                return px.bar(x=[], y=[])
                
        @self.app.callback(
            Output("max-interactions-chart", "figure"),
            Input("metrics-data", "children")
        )
        def update_max_interactions_chart(json_data):
            """Update the max interactions chart."""
            if not json_data:
                return go.Figure()
                
            try:
                df = pd.read_json(json_data, orient='split')
                
                df_max = df[df['metric_type'] == 'max_interactions_per_item']
                
                if len(df_max) == 0:
                    return go.Figure()
                    
                latest_max = df_max.iloc[0]
                
                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=latest_max['metric_value'],
                    title={"text": f"Item: {latest_max['dimensions'].get('item_id', 'unknown')}"},
                    gauge={
                        'axis': {'range': [None, max(latest_max['metric_value'] * 1.2, 10)]},
                        'bar': {'color': "rgb(58, 183, 149)"},
                        'steps': [
                            {'range': [0, latest_max['metric_value'] / 2], 'color': "lightgray"},
                            {'range': [latest_max['metric_value'] / 2, latest_max['metric_value']], 'color': "gray"}
                        ]
                    }
                ))
                
                fig.update_layout(
                    margin=dict(l=20, r=20, t=30, b=20),
                    height=250,
                    paper_bgcolor='white',
                )
                
                return fig
            except Exception as e:
                print(f"Error updating max interactions chart: {e}")
                return go.Figure()
                
        @self.app.callback(
            Output("min-interactions-chart", "figure"),
            Input("metrics-data", "children")
        )
        def update_min_interactions_chart(json_data):
            """Update the min interactions chart."""
            if not json_data:
                return go.Figure()
                
            try:
                df = pd.read_json(json_data, orient='split')
                
                df_min = df[df['metric_type'] == 'min_interactions_per_item']
                
                if len(df_min) == 0:
                    return go.Figure()
                    
                latest_min = df_min.iloc[0]
                
                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=latest_min['metric_value'],
                    title={"text": f"Item: {latest_min['dimensions'].get('item_id', 'unknown')}"},
                    gauge={
                        'axis': {'range': [0, 10]},
                        'bar': {'color': "rgb(255, 153, 102)"},
                        'steps': [
                            {'range': [0, latest_min['metric_value']], 'color': "lightgray"}
                        ]
                    }
                ))
                
                fig.update_layout(
                    margin=dict(l=20, r=20, t=30, b=20),
                    height=250,
                    paper_bgcolor='white',
                )
                
                return fig
            except Exception as e:
                print(f"Error updating min interactions chart: {e}")
                return go.Figure()
        
    def run(self):
        """Run the dashboard."""
        print(f"Starting dashboard at http://{self.host}:{self.port}")
        self.app.run_server(host=self.host, port=self.port, debug=True)


def run_dashboard():
    """Run the interaction dashboard."""
    dashboard = InteractionDashboard()
    dashboard.run()


if __name__ == "__main__":
    run_dashboard()
